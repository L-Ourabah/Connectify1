import React, { useState, useEffect } from 'react';
import { storage, db } from '../../../../services/firebase-config';
import { ref, uploadBytes, listAll, getDownloadURL } from 'firebase/storage';
import { collection, addDoc, getDocs } from 'firebase/firestore';
import { v4 } from 'uuid';
import '../../../../Style/profil.css';



function SectionVideo() {
    const [videoUpload, setVideoUpload] = useState(null);
    const [videoList, setVideoList] = useState([]);
    const [videoTitle, setVideoTitle] = useState('');

    // Utilisez le hook 'useEffect' pour obtenir les vid√©os depuis Firebase Storage lorsque le composant est mont√©.
    useEffect(() => {
        // Cr√©ez une r√©f√©rence √† la liste de vid√©os dans Firebase Storage.
        const videoListRef = ref(storage, 'videos/');

        // Utilisez la fonction 'listAll' pour obtenir une liste de tous les fichiers dans le r√©pertoire 'videos/'.
        listAll(videoListRef)
            .then((response) => {
                // La r√©ponse contient un tableau d'objets 'items', chaque objet repr√©sentant un fichier dans le r√©pertoire.

                // Utilisez 'Promise.all' pour ex√©cuter des requ√™tes 'getDownloadURL' pour chaque fichier et obtenir les URL de t√©l√©chargement.
                Promise.all(response.items.map((item) => getDownloadURL(item)))
                    .then((urls) => {
                        // Une fois que toutes les URL de t√©l√©chargement ont √©t√© obtenues, vous pouvez les stocker dans l'√©tat de votre composant.
                        setVideoList(urls);
                    })
            });

        // Obtenir les vid√©os depuis Firestore
        const fetchVideosFromFirestore = async () => {
            const videosCollectionRef = collection(db, 'videos');
            const querySnapshot = await getDocs(videosCollectionRef);
            const videos = [];

            querySnapshot.forEach((doc) => {
                const data = doc.data();
                videos.push({
                    id: doc.id,
                    title: data.titre,
                    url: data.url,
                });
            });

            // Mettre √† jour la liste des vid√©os
            setVideoList(videos.map((video) => video.url));
        };
        // D√©clenche la r√©cup√©ration initiale des vid√©os √† partir de Firebase Firestore.
        fetchVideosFromFirestore();
    }, []);

    const uploadVideo = async () => {
        // V√©rifiez si un fichier vid√©o a √©t√© s√©lectionn√©. S'il est null, ne faites rien.
        if (videoUpload == null) return;

        // Cr√©ez une r√©f√©rence au fichier vid√©o dans Firebase Storage avec un nom de fichier unique g√©n√©r√© par la fonction v4() de la biblioth√®que uuid.
        const videoRef = ref(storage, `videos/${videoUpload.name + v4() + '.mp4'}`);

        try {
            // Utilisez la fonction 'uploadBytes' pour t√©l√©charger le fichier vid√©o vers Firebase Storage. Elle renvoie un objet 'snapshot' qui permet de suivre la progression du t√©l√©chargement.
            const snapshot = await uploadBytes(videoRef, videoUpload);

            // Une fois le t√©l√©chargement termin√© avec succ√®s, utilisez 'getDownloadURL' pour obtenir l'URL de t√©l√©chargement de la vid√©o.
            const url = await getDownloadURL(snapshot.ref);

            // Mettez √† jour la liste des vid√©os en ajoutant la nouvelle URL de t√©l√©chargement √† l'√©tat existant.
            setVideoList((prev) => [...prev, url]);

            // Demandez √† l'utilisateur de choisir le titre
            const userVideoTitle = prompt('Choisissez un titre pour la vid√©o :');

            if (userVideoTitle) {
                // Ajoutez les d√©tails de la vid√©o √† Firestore avec le titre choisi
                const videosCollectionRef = collection(db, 'videos');
                await addDoc(videosCollectionRef, {
                    titre: userVideoTitle,
                    url: url,
                });
            }

            // R√©initialiser le champ de t√©l√©chargement vid√©o apr√®s l'envoi
            setVideoUpload(null);
        } catch (error) {
            console.error('Erreur lors de l\'envoi de la vid√©o :', error);
        }
    };

    const handleFileInputChange = (event) => {
        // R√©cup√®re le fichier vid√©o s√©lectionn√© par l'utilisateur √† partir de l'√©v√©nement.
        const selectedVideo = event.target.files[0];

        // Met √† jour l'√©tat 'videoUpload' avec le fichier vid√©o s√©lectionn√©.
        setVideoUpload(selectedVideo);
    };


    return (
        <div id="profile-video">
            <h2>Video</h2>
            <div className='option-video'>
                <input
                    type="file"
                    accept="video/*"
                    onChange={handleFileInputChange}
                    style={{ display: 'none' }}
                    id="videoFileInput"
                />
                <label htmlFor="videoFileInput">
                    {/*Choisissez une vid√©o <br/>*/} üìÅ
                </label>

                <input
                    type="text"
                    placeholder="Titre de la vid√©o"
                    value={videoTitle}
                    onChange={(e) => setVideoTitle(e.target.value)}
                />

                <button onClick={
                    uploadVideo}
                >Poster la vid√©o</button>
            </div>
            <div id='profile-video-flex'>
                {videoList.map((url, index) => (
                    <div key={`video-${index}`} className='profile-video-item'>
                        <video controls>
                            <source src={url} type="video/mp4" />
                        </video>
                    </div>
                ))}
            </div>
        </div>
    );
}

export default SectionVideo;


